================================ TCP / UDP ===================================================
Q1) What Is Socket?
A socket is a handle that a local program can pass to the networking API to connect to another machine.

Q2) What Is The Difference Between Tcp And Udp?
-> TCP is a connection-oriented protocol. Connection-orientation means that the communicating devices should establish a connection before transmitting data and should 
close the connection after transmitting the data.
UDP is the Datagram-oriented protocol. This is because there is no overhead for opening a connection, maintaining a connection, and terminating a connection. 
UDP is efficient for broadcast and multicast types of network transmission.
-> TCP has a (20-60) bytes variable length header. UDP has an 8 bytes fixed-length header.
-> TCP is used by HTTP, HTTPs, FTP, SMTP and Telnet. UDP is used by DNS, DHCP, TFTP, SNMP, RIP, and VoIP.
-> The TCP connection is a byte stream. UDP connection is message stream.

Q3) What Does A Socket Consists Of?
Socket consists of an IP Address and Port Number.

Q4) How Do I Open A Socket?
To open a socket: "Socket socket = new Socket(“127.0.0.1”, 5000)" The java.net Socket class represents a Socket.

Q5) How Do I Create An Input Stream? How Do I Create An Output Stream?
By initializing the Input and output stream 
private DataInputStream  input   = null;   private DataOutputStream out     = null; 

Q6) How do I close a Socket?
close() call shuts down the socket associated with the socket descriptor socket, and frees resources allocated to the socket.

Q7) Explain Data Transfer Over Connected Sockets - Send() And Recv()?
The send() function sends data on the socket with descriptor socket. The send() call applies to all connected sockets. The send() function shall initiate
transmission of a message from the specified socket to its peer. The send() function shall send a message only when the socket is connected 
(including when the peer of a connectionless socket has been set via connect()).
               
The recv function is used to read incoming data on connection-oriented sockets, or connectionless sockets. When using a connection-oriented protocol, 
the sockets must be connected before calling recv. When using a connectionless protocol, the sockets must be bound before calling recv.

Q8) Explain Connection Establishment By Server - Accept()?
The accept() call is used by a server to accept a connection request from a client. When a connection is available, the socket created is ready for use to 
read data from the process that requested the connection. The call accepts the first connection on its queue of pending connections for the given socket socket.

Q9) How To Make A Socket A Listen-only Connection Endpoint - Listen()?
The listen() call indicates a readiness to accept client connection requests. It transforms an active socket into a passive socket. Once called, socket can never be used as an active socket to initiate connection requests. Calling listen() is the third of four steps that a server performs to accept a connection.

Q10) How Sockets Can Be Used To Write Client-server Applications Using A Connection-oriented Client-server Technique?
A socket has a typical flow of events. In a connection-oriented client-to-server model, the socket on the server process waits for requests from a client. To do this, the server first establishes (binds) an address that clients can use to find the server. We can use Socket class for writing Client-Server Applications. It gives
us access to various of its classes (Data Input Stream and Output Stream) so we can perform and build applications using Client-Server Technique.

Q11) What does a Bind() function do?
Bind() function in socket programming is used to associate the socket with local address i.e. IP Address, port and address family. to provide an identification to a server, Bind () function associate sockets with IP address and port.  Now, if we bind socket with address e.g. (10.17.18.19, 6500) for server B, a client can connect to this particular server specifying the same IP address and port.

Q12) What This Function Socket() Does?
int socket(int domain, int type, int protocol);
The function socket() creates a new socket. The return value is a descriptor, an int, which is our socket. The function has three parameters:
domain, which describes the protocol family which the socket is created within. type, which determines the type of socket. protocol, which determines the actual protocol used. 

Q13) What info is needed for creating TCP Sockets?
Four pieces of information are needed to create a TCP socket:
The local system's IP address.
The TCP port number the local application is using.
The remote system's IP address.
The TCP port number to which the remote application is responding.

======================================================================= RMI ================================================================

Q1) What is the method that is used by the RMI client to connect to remote RMI servers?
A remote object can be associated with a name using the Naming class's bind or rebind methods. Once a remote object is registered (bound) with the RMI registry on the local host, callers on a remote (or local) host can lookup the remote object by name, obtain its reference, and then invoke remote methods on the object.

Q2) What is RMI?
RMI stands for Remote Method Invocation. It is a mechanism that allows an object residing in one system (JVM) to access/invoke an object running on another JVM. RMI is used to build distributed applications; it provides remote communication between Java programs. It is provided in the package java.rmi

Q3) What is RMI remote object?
A remote object is an object that defines methods that can be called by a client located in a remote Java Virtual Machine (JVM). A remote object implements one or more remote interfaces that declare remote methods of the object.

Q4) How does RMI communicate with the remote object?
RMI uses stub and skeleton object for communication with the remote object.

Q5) Different layers of RMI architecture.
The RMI system consists of three layers: the stub/skeleton layer, the remote reference layer, and the transport layer.
- The stub and skeleton layer is responsible for marshaling and unmarshaling the data and transmitting and receiving them to/from the Remote Reference Layer.
- The Remote reference layer is responsible for carrying out the invocation.
- The Transport layer is responsible for setting up connections, managing requests, monitoring them and listening for incoming calls.

Q6) What is remote interface in RMI.
In RMI, a remote interface is an interface that declares a set of methods that may be invoked from a remote Java virtual machine. A remote interface must satisfy the following requirements: A remote interface must at least extend, either directly or indirectly, the interface java. rmi.

Q7) What is the basic principle of RMI architecture ?
The RMI architecture is based on a very important principle which states that the definition of the behavior and the implementation of that behavior, are separate concepts. RMI allows the code that defines the behavior and the code that implements the behavior to remain separate and to run on separate JVMs.

Q8) What is the role of the java.rmi.Naming Class ?
The java.rmi.Naming class provides methods for storing and obtaining references to remote objects in the remote object registry. Each method of the Naming class takes as one of its arguments a name that is a String in URL format.

Q9) What is meant by binding in RMI ?
Binding is the process of associating or registering a name for a remote object, which can be used at a later time, in order to look up that remote object. A remote object can be associated with a name using the bind or rebind methods of the Naming class.

Q10) What is the difference between using bind() and rebind() methods of Naming Class ?
The bind method bind is responsible for binding the specified name to a remote object, while the rebind method is responsible for rebinding the specified name to a new remote object. In case a binding exists for that name, the binding is replaced.

Q11) What are the steps involved to make work a RMI program ?
The following steps must be involved in order for a RMI program to work properly:
•	Compilation of all source files.
•	Generatation of the stubs using rmic.
•	Start the rmiregistry.
•	Start the RMIServer.
•	Run the client program.

Q12) What is the role of stub in RMI ?
A stub for a remote object acts as a client’s local representative or proxy for the remote object. The caller invokes a method on the local stub, which is responsible for executing the method on the remote object. When a stub’s method is invoked, it undergoes the following steps:
•	It initiates a connection to the remote JVM containing the remote object.
•	It marshals the parameters to the remote JVM.
•	It waits for the result of the method invocation and execution.
•	It unmarshals the return value or an exception if the method has not been successfully executed.
•	It returns the value to the caller.

Q13) Explain Marshalling and demarshalling.
When an application wants to pass its memory objects across a network to another host or persist it to storage, the in-memory representation must be converted to a suitable format. This process is called marshalling and the revert operation is called demarshalling.

========================================================= MPI ====================================================================================

Q1) What is MPI?
Message Passing Interface is a standardized and portable message-passing standard designed to function on parallel computing architectures. 

Q2) What is my processor id number ? 
MPI_COMM_RANK

Q3) How many processes are contained within a communicator? 
The predefined communicator MPI_COMM_WORLD for seven processes. The numbers indicate the ranks of each process. Every communicator contains a group which is a list of processes.

Q4) How many processors am I using? 
MPI_COMM_SIZE

Q5) Explain  six functions, which initiate and terminate a computation, identify processes, and send and receive messages in MPI
 MPI_INIT      		:		 Initiate an MPI computation.
 MPI_FINALIZE  		:		 Terminate a computation.
 MPI_COMM_SIZE		:		 Determine number of processes.
 MPI_COMM_RANK		:		 Determine my process identifier.
 MPI_SEND      		:		 Send a message.
 MPI_RECV      		:		 Receive a message.
 
 Q6) What is SPMD ?
 Single Instruction, Multiple Data (SIMD) units refer to hardware components that perform the same operation on multiple data operands concurrently.
 
 Q7) What is MPMD (Non-SPMD)?
 The Multiple-Program-Multiple-Data (MPMD) model is. attractive yet rarely exploited in parallel applications. running on distributed memory multi-computers. In. contrast to the Single-Program-Multiple-Data (SPMD)
 
 Q8) What is  MPJ Express
 MPJ Express is an open source Java message passing library that allows application developers to write and execute parallel applications for multicore processors and compute clusters/clouds. The software is distributed under the MIT (a variant of the LGPL) license.
 
 Q9) What is scatter operation?
 The communication collective operation “scatter” distributes data of one process in separate parts to all the processes (including itself) within the scope of a communicator. The communicator of size processes disseminates the data of the source process in size-equal partitions.
 
 ========================================================== IDL CORBA ==============================================================================
 
Q1) Explain The Reason To Implement A Corba Application With Multi-threading?
CORBA server applications may be multi-threaded for serveral reasons.
A particular CORBA object may support an operation whose implementation performs some blocking routine. This may be a disk read or database query. Let us assume that the server application processes all CORBA events within a single main thread. This means that the server will be unable to respond to incoming connection requests or invocation requests while the blocking operation is in progress. Multi-threading can be used to avoid these sorts of situations. The server can be more accessible if multiple threads are allowed to process (an block during) incoming CORBA events.
A single multi-threaded server process supporting many (>25) clients is much more efficient that many (>25) single-threaded server processes each supporting its own client. Running a single application with multiple threads requires less machine resources than running multiple applications. This advantage can be seen even if the operation invocations are of short duration and non-blocking.

Q2)  Explain Does Corba Supports Asynchronous Communication?
Kind of. At the lowest level CORBA supports two modes of communication:
A synchronous request/response which allows an application to make a request to some CORBA object and then wait for a response.
A deferred synchronous request/response which allows an application to make a request to some CORBA object. An empty result will be returned immediately to the application. It can then perform other operations and later poll the ORB to see if the result has been made available.
At the lowest level, the CORBA deferred synchronous communication does allow a certain degree of asynchronous communication. Polling for responses represents only one form of asynchronous communication. Other more sophisticated asynchronous communication can only be achieved by developing an architecture on top of the lowest levels of CORBA.

Q3) Explain Can Corba Application Have Call Back?
Yes. The words client and server are really only applicable in the context of a remote call. In other words, the client process can also receive calls on CORBA objects that it implements and hands out the references to.

Q4) Explain Some Reason To Avoid The Development Of Multi-threaded Corba Application?
Building multi-threaded applications requires an additional efforts in the area of design, development and testing. Issues like concurrency and synchronization become more critical. Difficult to find software bugs are unfortunately easy to introduce. A specific set of application requirements can often be met without resorting to the use of threaded clients or servers. This is not true with all applications. Some do require multi-threading to achieve their desired level of concurrency, performance or scalability.

Q5) Explain What Is Corba Good For?
CORBA is useful in many situations. Because of the easy way that CORBA integrates machines from so many vendors, with sizes ranging from mainframes through minis and desktops to hand-helds and embedded systems, it is the middleware of choice for large (and even not-so-large) enterprises. One of its most important, as well most frequent, uses is in servers that must handle large number of clients, at high hit rates, with high reliability. CORBA works behind the scenes in the computer rooms of many of the world's largest websites; ones that you probably use every day. Specializations for scalability and fault-tolerance support these systems. But it's not used just for large applications; specialized versions of CORBA run real-time systems, and small embedded systems.

Q6) Explain Can Corba Allow Servers To Cause Client Side Events Or Notifications?
CORBA communication is inherently asymmetric. Request messages originate from clients and responses originate from servers. The important thing to realize is that a CORBA server is a CORBA object and a CORBA client is a CORBA stub. A client application might use object references to request remote service, but the client application might also implement CORBA objects and be capable of servicing incoming requests. Along the same lines, a server process that implements CORBA objects might have several object references that it uses to make requests to other CORBA objects. Those CORBA objects might reside in client applications. By implementing a CORBA object within an client application, any process that obtains its object reference can ?notify? it by performing an operation on the client-located object.

Q7) What are the CORBA services?
Some examples of these generic services are:
-> Naming and trading services that allow objects to refer to and discover other objects on the network. The naming service is a directory service that allows objects to be named and discovered by other objects. 
-> Notification services that allow objects to notify other objects that some event has occurred. Objects may register their interest in a particular event with the service and, when that event occurs, they are automatically notified. 
-> Transaction services that support atomic transactions and rollback on failure. Transactions are a fault-tolerance facility that support recovery from errors during an update operation.

Q8) Purpose of IDL
IDL stands for Interface Definition Language.  Its purpose is to define the capabilities of a distributed service along with a common set of data types for interacting with those distributed services.

Q9) Explain inter ORB Communication
IIOP (Internet Inter-ORB Protocol) is a protocol that makes it possible for distributed programs written in different programming languages to communicate over the Internet. IIOP is a critical part of a strategic industry standard, the Common Object Request Broker Architecture (CORBA).

================================================ Election Algorithm ===================================================================

Q1) Need for election algorithm.
Leader election is the simple idea of giving one thing (a process, host, thread, object, or human) in a distributed system some special powers. Those special powers could include the ability to assign work, the ability to modify a piece of data, or even the responsibility of handling all requests in the system.

Q2) What is ring algorithm
This algorithm applies to systems organized as a ring(logically or physically). In this algorithm we assume that the link between the process are unidirectional and every process can message to the process on its right only. Data structure that this algorithm uses is active list, a list that has priority number of all active processes in the system.
-> If process P1 detects a coordinator failure, it creates new active list which is empty initially. It sends election message to its neighbour on right and adds number 1 to its active list.
-> If process P2 receives message elect from processes on left, it responds in 3 ways:
(I) If message received does not contain 1 in active list then P1 adds 2 to its active list and forwards the message.
(II) If this is the first election message it has received or sent, P1 creates new active list with numbers 1 and 2. It then sends election message 1 followed by 2.
(III) If Process P1 receives its own election message 1 then active list for P1 now contains numbers of all the active processes in the system. Now Process P1 detects highest priority number from list and elects it as the new coordinator.

Q3) What is Bully algorithm.
This algorithm applies to system where every process can send a message to every other process in the system.
Algorithm – Suppose process P sends a message to the coordinator.
-> If coordinator does not respond to it within a time interval T, then it is assumed that coordinator has failed.
-> Now process P sends election message to every process with high priority number.
-> It waits for responses, if no one responds for time interval T then process P elects itself as a coordinator.
-> Then it sends a message to all lower priority number processes that it is elected as their new coordinator.
-> However, if an answer is received within time T from any other process Q,
(I) Process P again waits for time interval T’ to receive another message from Q that it has been elected as coordinator.
(II) If Q doesn’t responds within time interval T’ then it is assumed to have failed and algorithm is restarted.

=========================================================== Web Service ========================================================================

Q1) Define Web Services
A web service is either: a service offered by an electronic device to another electronic device, communicating with each other via the Internet, or a server running on a computer device, listening for requests at a particular port over a network, serving web documents.

Q2) Explain Types of Web Services
There are two types of web services:
SOAP stands for Simple Object Access Protocol. SOAP is an XML based industry standard protocol for designing and developing web services. Since it‟s XML based, it‟s platform and language independent. So, our server can be based on JAVA and client can be on .NET, PHP etc. and vice versa.
REST: REST (Representational State Transfer ) is an architectural style for developing web services. It‟s getting popularity recently because it has small learning curve when compared to SOAP. Resources are core concepts of Restful web services and they are uniquely identified by their URIs.

Q3) Explain Web service architectures.
As part of a web service architecture, there exist three major roles.
-> Service Provider is the program that implements the service agreed for the web service and exposes the service over the internet/intranet for other applications to interact with.
-> Service Requestor is the program that interacts with the web service exposed by the Service Provider. It makes an invocation to the web service over the network to the Service Provider and exchanges information.
-> Service Registry acts as the directory to store references to the web services.

Q4) What is SOAP web services.
-> Simple Object Access Protocol (SOAP) is an XML-based protocol for accessing web services. It is a W3C recommendation for communication between two applications, and it is a platform- and language-independent technology in integrated distributed applications.
-> Universal Description, Discovery, and Integration (UDDI): UDDI is an XMLbased framework for describing, discovering, and integrating web services. It acts as a directory of web service interfaces described in the WSDL language.
-> Web Services Description Language (WSDL): WSDL is an XML document containing information about web services, such as the method name, method parameters, and how to invoke the service.

Q5) What is RESTful web services.
REST service is not a collection of a paradigm or specific rules; it is instead the style architecture for software. Those apps that are designed using this architecture are collectively termed as RESTful web services. Contrasting SOAP, which aims at actions, REST deals majorly on the resources.
It establishes the resources through the use of URL as well as depends on the nature of the transport protocol (like HTTP's: GET, PUT, POST, DELETE, etc.) used to perform the resources. The allocation of resources in REST depends on the URL. It is more like conventions based application

Q6) Difference between SOAP and REST
-> SOAP stands for Simple Object Access Protocol whereas REST stands for Representational State Transfer.
-> SOAP is a protocol whereas REST is an architectural pattern.
-> SOAP uses service interfaces to expose its functionality to client applications while REST uses Uniform Service locators to access to the components on the hardware device.
-> SOAP needs more bandwidth for its usage whereas REST doesn’t need much bandwidth.
-> Comparing SOAP vs REST API, SOAP only works with XML formats whereas REST work with plain text, XML, HTML and JSON.
-> SOAP cannot make use of REST whereas REST can make use of SOAP.

=============================================== Pub Sub ==========================================================================

Q1) What is Message-Oriented Middleware (MOM). 
The full form of MOM is Message-Oriented Middleware which is an infrastructure that allows communication and exchanges the data (messages). It involves the passing of data between applications using a communication channel that carries self-contained units of information (messages).In a MOM-based communication environment, messages are sent and received asynchronously.

Q2) What is Enterprise Messaging System: 
Enterprise messaging system (EMS) is a messaging system allowing software applications and systems to communicate semantically. The semantics can be applied by sending precise messages to and fro throughout the enterprise. The messages are asynchronous data (messages not sent or processed in real time, meaning not like a chat room or telephone conversation) sent by one application or system to another application or system and stored in the queue of the receiving program until processed. The system is not dependent on a particular operating system or programming language.

Q3) Explain JMS interfaces
Java's implementation of an EMS in the Application Programming Interface (API) format is known as JMS.
JMS allows distributed Java applications to communicate with applications developed in any other technology that understands messaging through asynchronous messages. JMS applications contain a provider, clients, messages, and administrated objects.
JMS defines a set of high-level interfaces that encapsulate several messaging concepts. These high-level interfaces are further extended for the Point-To-Point and publish/subscribe messaging domains:
-> ConnectionFactory: This is an administered object with the ability to create a connection.
-> Connection: This is an active connection handle to the provider.
-> Destination: This is an administered object that encapsulates the identity of a message destination where messages are sent to/received from.
-> Session: This is a single-threaded context for sending/receiving messages. To ensure a simple session-based transaction, concurrent access to a message by multiple threads is restricted. We can use multiple sessions for a multithreaded application.
-> MessageProducer: This is used to send messages.
-> MessageConsumer: This is used to receive messages.

====================================================== Flask ==================================================================================
Q1) Explain the following terms

1) Microservices 
Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are Highly maintainable and testable Loosely coupled Independently deployable Organized around business capabilities Owned by a small team

2) Web frameworks 
Web Development Framework or simply “web framework” is a software framework that offers a set of tools to support developing web applications including web services, web resources, and web APIs (Application Programming Interfaces). Web development framework offers a wide range of prewritten components, code snippets, and entire application templates to ease the work of web developers. Frameworks provide standardized development and design conventions that can be applied and modified to fit the needs of your website. The purpose of a web development framework is to automate the common tasks performed during the development phase. Frameworks give us a place to start so that we can focus on features rather than configuration details.

3) Common web framework functionality
Frameworks provide functionality in their code. The extensions to perform common operations required to run web applications. These common procedures include
1.	URL Routing
2.	HTML, XML, JSON, and other output format templating
3.	Database manipulation
4.	Secure deposit against Cross-site submission forgery (CSRF) and other attacks
5.	Session safe-keeping and retrieval

4) Flask
Flask is a web application framework written in Python. Armin Ronacher, who leads an international group of Python enthusiasts named Pocco, develops it. Flask is based on Werkzeug WSGI toolkit and Jinja2 template engine. Both are Pocco projects

5) WSGI
WSGI is the Web Server Gateway Interface. It is a specification that describes how a web server communicates with web applications, and how web applications can be chained together to process one request.

6) Werkzeug 
Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) compatible web application in Python.

7) Virtual Environment
A virtual environment is a tool that helps to keep dependencies required by different projects separate by creating isolated python virtual environments for them. This is one of the most important tools that most of the Python developers use.
